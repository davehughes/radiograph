// Generated by CoffeeScript 1.3.3
(function() {
  var async, data, files, fs, helpers, streamZip, zappa, zipper, zipstream, _;

  _ = require('underscore')._;

  fs = require('fs');

  async = require('async');

  zipstream = require('zipstream');

  zappa = require('zappa');

  zipper = zappa.app(function() {
    this.get({
      '/': function() {
        return this.render('index', {
          name: 'Zappa'
        });
      }
    });
    this.get({
      '/specimens': function() {
        return this.render({
          'image-control': {
            name: 'foo.jpg'
          }
        });
      }
    });
    this.post({
      '/specimens': function() {}
    });
    this.get({
      '/specimens/:id': function() {}
    });
    this.get({
      '/specimens/new': function() {}
    });
    this.post({
      '/specimens/:id': function() {}
    });
    this.get({
      '/specimens/:id/edit': function() {}
    });
    this.get({
      '/images/:id': function() {}
    });
    this.get({
      '/images/:id/:derivative': function() {}
    });
    this.get({
      '/specimens/data': function() {
        this.response.writeHead(200);
        return streamZip(this.response, files, this.response.end);
      }
    });
    this.include('./views');
    this.view({
      index: function() {
        return h1("Hello, " + this.name + "!");
      }
    });
    return this.view({
      layout: function() {
        doctype(5);
        return html(function() {
          head(function() {
            return title(this.title);
          });
          return body(function() {
            return this.body;
          });
        });
      }
    });
  });

  zipper.app.listen(8002);

  helpers = {
    menuItem: function(url, text, icon, file) {
      if (file == null) {
        file = false;
      }
      return li(function() {
        return a({
          href: this.url(function() {
            i({
              "class": icon
            });
            span(text);
            if (file) {
              return input({
                type: file
              });
            }
          })
        });
      });
    },
    icon: function(name) {
      return i({
        "class": "icon-" + name
      });
    },
    caret: function() {
      return span('.caret', '&nbsp;');
    }
  };

  data = {
    labels: {
      specimenId: 'Specimen ID',
      taxon: 'Taxon',
      sex: 'sex'
    },
    rows: [
      {
        specimenId: '1',
        sex: 'M',
        taxon: 'Alouatta belzebul',
        images: [
          {
            aspect: 'L',
            path: '/tmp/ziptest/test.txt'
          }, {
            aspect: 'S',
            path: '/tmp/ziptest/test2.txt'
          }
        ]
      }, {
        specimenId: '2',
        sex: 'F',
        taxon: 'Cebus apella apella',
        images: [
          {
            aspect: 'L',
            path: '/tmp/ziptest/test.txt'
          }, {
            aspect: 'S',
            path: '/tmp/ziptest/test2.txt'
          }
        ]
      }
    ]
  };

  streamZip = function(out, files, callback) {
    var fileSeries, zip;
    zip = zipstream.createZip({
      level: 1
    });
    zip.pipe(out);
    fileSeries = _.map(files, function(f) {
      return function(cb) {
        return zip.addFile(fs.createReadStream(f.path), {
          name: f.name
        }, cb);
      };
    });
    fileSeries.push(function(cb) {
      return zip.finalize(cb);
    });
    return async.series(fileSeries, callback);
  };

  files = [];

  _.each(data.rows, function(row) {
    return _.each(row.images, function(image) {
      return files.push({
        name: "data/" + row.taxon + "/" + image.aspect + ".txt",
        path: image.path
      });
    });
  });

}).call(this);
