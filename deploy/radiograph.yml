---
- hosts: radiograph
  sudo: true
  tags:
  - install
  tasks:
  - include: postgresql/plays/install.yml

  handlers:
  - include: postgresql/handlers.yml
    
#------------------------------------------------------------------------------

- hosts: radiograph
  sudo: true
  tags:
  - install
  tasks:
  - include: postgresql/plays/service_db.yml
    vars:
      name: radiograph
      user: radiograph
      password: fc123
      auth_rules:
      - type: host
        database: radiograph
        user: radiograph
        address: 127.0.0.1/32
        method: trust

  handlers:
  - include: postgresql/handlers.yml

#------------------------------------------------------------------------------

- hosts: radiograph
  sudo: true
  vars:
    app_name: radiograph
    app_version: master
    user: radiograph
    group: wheel
    directory: /opt/${app_name}
    app_directory: ${directory}/app
    virtualenv: ${app_directory}/env
    static_root: ${directory}/files/static
    media_root: ${directory}/files/media
    require_maintenance_mode: False
    github:
      oauth_token: $ENV(GITHUB_OAUTH_TOKEN)
    uwsgi:
      socket: ${directory}/run/uwsgi.sock
      pidfile: ${directory}/run/uwsgi.pid
    nginx:
      user: nginx
      server_name: www.primate-radiograph.com
      static_root: ${static_root}
      maintenance_file: ${directory}/maintenance.html
    django:
      manage: "${virtualenv}/bin/python ${app_directory}/manage.py"

  tasks:

  - include: python/plays/install.yml
  - include: nginx/plays/install.yml

  - name: install system dependencies
    yum: name=${item} state=installed
    with_items:
    - postgresql-devel
    - zlib-devel
    - libjpeg-devel
    - freetype-devel
    - libxslt-devel

  - name: ${app_name} - create service user
    user: name=${user}
          groups=${nginx.user}
          home=${directory}

  - name: ${app_name} - ensure root directory
    file: name=${directory}
          state=directory
          owner=${user}
          group=${group}
          mode=2771

  - name: ${app_name} - ensure service directories
    file: name=${item}
          state=directory
          recurse=true
          owner=${user}
          group=${group}
          mode=2771
    with_items:
    - ${directory}/logs
    - ${directory}/run
    - ${directory}/conf
    tags:
    - install

  - name: ${app_name} - ensure file directories
    file: name=${item}
          state=directory
          recurse=true
          owner=${user}
          group=${group}
          mode=0750
    with_items:
    - ${directory}/files

  - name: checkout main application
    git: repo=git://github.com/davehughes/radiograph
         version=${app_version}
         force=true
         dest=${app_directory}
    sudo_user: ${user}
    tags:
    - deploy
    notify:
    - reload uwsgi

  # Necessary because the deploy scripts update the permissions of the
  # application code, but those changes shouldn't be tracked.
  - name: set git to ignore file permission changes by default
    shell: cd ${app_directory} &&
           git config core.filemode false

  - name: set appropriate permissions for main application
    file: name=${app_directory}
          state=directory
          owner=${user}
          group=${group}
          recurse=true
          mode=2771
    tags:
    - deploy

  - name: ${app_name} - create virtualenv
    shell: virtualenv --python=/usr/bin/python2.7 ${virtualenv}
           creates=${virtualenv}/bin/activate
    tags:
    - deploy

  - name: ${app_name} - set appropriate permissions for virtualenv
    file: name=${virtualenv}
          state=directory
          owner=${user}
          group=${group}
          recurse=true
          mode=2771
    tags:
    - deploy

  - name: install dependencies
    pip: requirements=${app_directory}/requirements.txt
         virtualenv=${virtualenv}
         extra_args="--exists-action w"
    sudo: true
    sudo_user: ${user}
    tags:
    - deploy

  - name: enter maintenance mode
    copy: dest=${nginx.maintenance_file}
          content=""
    only_if: ${require_maintenance_mode}  
    notify:
    - exit maintenance mode
    tags:
    - deploy
      
  - name: run syncdb
    shell: ${django.manage} syncdb --noinput
    tags:
    - deploy

  - name: run migrate
    shell: ${django.manage} migrate --noinput
    tags:
    - deploy

  - name: collect static files
    shell: ${django.manage} collectstatic --noinput 
    tags:
    - deploy

  #------------ [ Install & configure uwsgi ] -----------------
  - name: install uwsgi
    pip: name=uwsgi
         virtualenv=${virtualenv}
         state=present

  - name: configure uwsgi
    template: src=${app_name}/templates/uwsgi.ini
              dest=${directory}/conf/uwsgi.ini
              force=true
    register: uwsgi_config
    tags:
    - configure
    notify:
    - reload uwsgi

  - name: render supervisor config template
    template: src=${app_name}/templates/supervisor.conf
              dest=${directory}/conf/supervisor.conf
              force=true
    register: supervisor_config
    tags:
    - configure
    notify:
    - update supervisor

  - name: symlink supervisor config into conf.d
    file: dest=/etc/supervisor/conf.d/${app_name}.conf
          src=${directory}/conf/supervisor.conf
          state=link


  #------------ [ Nginx ] -----------------

  - name: ${app_name} - add nginx configuration
    template: src=${app_name}/templates/nginx.conf
              dest=${directory}/conf/nginx.conf
              force=true
    register: nginx_conf
    tags:
    - configure
    notify:
    - reload nginx

  - name: symlink nginx configuration
    file: dest=/etc/nginx/conf.d/${app_name}.conf
          src=${directory}/conf/nginx.conf
          state=link

  - include: nginx/plays/generate_certificate.yml
    vars:
      ssl_directory: /etc/nginx/ssl
      name: ${nginx.server_name}

  - name: add nginx 'maintenance mode' file for manual switching
    copy: content=""
          dest=${nginx.maintenance_file}.RENAME
          owner=${user}
          group=${group}

  handlers:
  - include: nginx/handlers.yml

  - name: reload uwsgi
    shell: "[ -f ${uwsgi.pidfile} ] || ${virtualenv}/bin/uwsgi --reload ${uwsgi.pidfile}"

  - name: update supervisor
    shell: supervisorctl update

  - name: exit maintenance mode
    file: name=${nginx.maintenance_file} state=absent
