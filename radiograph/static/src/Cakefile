fs      = require 'fs'
path    = require 'path'
stitch  = require 'stitch'
util    = require 'util'
_       = require('underscore')._
{exec, spawn} = require 'child_process'

###############################################################################
#
# STATIC CONFIGURATION AND RUNTIME OPTIONS
#
###############################################################################

COFFEE_SRC    = path.join(__dirname, 'coffee')
JS_SRC        = path.join(__dirname, 'js')
LESS_SRC      = path.join(__dirname, 'less')
JS_OUT        = path.join(__dirname, '../js')
CSS_OUT       = path.join(__dirname, '../css')
RADIOAPP_LESS     = path.join(LESS_SRC, 'radioapp.less')
RADIOAPP_CSS      = path.join(CSS_OUT, 'radioapp.css')
RADIOAPP_JS       = path.join(JS_OUT, 'radioapp.js')

option '-u', '--uglify', 'Apply uglify-js compression to compiled JS output'

# global default options
OPTIONS =
  uglify: false

###############################################################################
#
# TASKS
#
###############################################################################
  
task 'build', 'Build all of the source files into their output directories.', (opts) ->
  OPTIONS = _.extend(OPTIONS, opts)
  build()

task 'watch', 'Watch source files and build changes.', (opts) ->
  OPTIONS = _.extend(OPTIONS, opts)
  build()
  util.log "Watching for changes..."

  coffeeFiles   = collectFiles(COFFEE_SRC, '.coffee')
  lessFiles     = collectFiles(LESS_SRC, '.less')
  vendorFiles   = collectFiles(JS_SRC, '.js')
  jsFiles = [].concat(coffeeFiles, vendorFiles)

  # watch jsFiles, ->
  #   compileCoffee
  #     paths: [COFFEE_SRC, JS_SRC]
  #     callback: (err, output) -> writeJS(output, RADIOAPP_JS)

  watch lessFiles, ->
    compileLess
      input: RADIOAPP_LESS
      callback: (code, output) -> writeJS(output, RADIOAPP_CSS)

build = (callback) ->
  compileLess 
    input: RADIOAPP_LESS
    callback: (code, output) -> writeJS(output, RADIOAPP_CSS)
  # compileCoffee
  #   paths: [COFFEE_SRC, JS_SRC]
  #   callback: (err, output) -> writeJS(output, RADIOAPP_JS)
  callback?()

compileLess = (opts) ->
  less = spawn 'lessc', ['--yui-compress', opts.input]
  output = ''
  less.stdout.on 'data', (data) -> output += data
  less.on 'exit', (code) -> opts.callback(code, output)

compileCoffee = (opts) ->
  pkg = stitch.createPackage paths: opts.paths
  pkg.compile (err, output) ->
    if err
      util.log err
      opts.callback?(err)
    else
      if opts.uglify then output = uglify(output)
      opts.callback?(err, output)

# Minify using uglify-js
uglify = (source, callback) ->
  parser = require('uglify-js').parser
  uglify = require('uglify-js').uglify
  ast = parser.parse(source)
  ast = uglify.ast_mangle(ast)
  ast = uglify.ast_squeeze(ast)
  output = uglify.gen_code(ast)
  callback?(output) or output

# Write source to JS output file
writeJS = (source, outfile, callback) ->
  fs.writeFile outfile, source, (error) ->
    if error
      util.log error
    else
      util.log "Wrote #{outfile}"
      callback?()

# Return an array of file paths relative to baseDir 
# that match the supplied extension.
collectFiles = (baseDir, extension) ->
  files = []
  dirfiles = fs.readdirSync baseDir
  for file in dirfiles
    do (file) ->
      currentFile = baseDir + '/' + file
      stats = fs.statSync(currentFile)
      if stats.isFile()
        files.push currentFile
      else if stats.isDirectory()
        files = files.concat collectFiles currentFile, extension
  return files

# Associate a function to be called when files from a supplied list change.
watch = (filesToWatch, onChangeCallback, callbackArgs...) ->

  watchErr = (e) ->
    util.log "Error: #{e.message}"

  for file in filesToWatch
    do (file) ->
      try
        watcher = fs.watch file, callback = (event) ->
          if event is 'change'
            onChangeCallback file, callbackArgs...
          else if event is 'rename'
            watcher.close()
            try
              watcher = fs.watch file, callback, callbackArgs...
            catch e
              watchErr e
      catch e
          watchErr e
